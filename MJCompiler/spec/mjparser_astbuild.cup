package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}




terminal COLON, PLUS, RPAREN, COMMA, SEMICOLON, EXTENDS, NEW, ELSE, IF, DOT, LCURLY;
terminal MINUS, NOT_EQUAL, VOID, AND, LPAREN, EQUAL, LESS, LSQUARE;
terminal IS_EQUAL, BREAK, READ, INCREMENT, ASTERISK, GREATER, WHILE, SLASH;
terminal GREATER_EQUAL, LESS_EQUAL, PRINT, RCURLY, CLASS, DECREMENT, PROG;
terminal RSQUARE, RETURN, CONTINUE, OR, CONST, PERCENT, ASSIGN;
terminal Character CHAR;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal String IDENT;
terminal FINDANY;
terminal FINDANDREPLACE;
terminal FOREACH;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;

nonterminal Declaration Declaration;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ConstDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct SingleConstDecl;
nonterminal MultipleConstDecl MultipleConstDecl;
nonterminal VarDeclarations VarDeclarations;
nonterminal MoreVarDecl MoreVarDecl;
nonterminal EndOfVarDecl EndOfVarDecl;
nonterminal Brackets Brackets;

nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj TypeMethod;
nonterminal rs.etf.pp1.symboltable.concepts.Obj VoidMethod;
nonterminal MethodFormPars MethodFormPars;
nonterminal MethodVarDecl MethodVarDecl;
nonterminal SingleFormPar SingleFormPar;
nonterminal MultipleFormPar MultipleFormPar;
nonterminal MethodDummy MethodDummy;

nonterminal ClassDecl ClassDecl;
nonterminal ClassName ClassName;
nonterminal ClassConstrMethod ClassConstrMethod;
nonterminal ClassMethod ClassMethod;
nonterminal ClassConstr ClassConstr;
nonterminal ClassVarDecl ClassVarDecl;
nonterminal ClassExtends ClassExtends;

nonterminal DesignatorStatement DesignatorStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorName;

nonterminal WhileStart WhileStart;
nonterminal WhileEnd WhileEnd;

nonterminal PrintExpr PrintExpr;
nonterminal StmtConst StmtConst;

nonterminal IfStatement IfStatement;
nonterminal ElseStatement ElseStatement;
nonterminal DummyBeforeIf DummyBeforeIf;
nonterminal BeforeIFConditionDummy BeforeIFConditionDummy;
nonterminal AfterIFConditionDummy AfterIFConditionDummy;
nonterminal DummyAfterElse DummyAfterElse;


nonterminal Assignop Assignop;
nonterminal AssignDummy AssignDummy;
nonterminal FactParam FactParam;
nonterminal ActPars ActPars;

nonterminal Label Label;

nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;

nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFact;
nonterminal rs.etf.pp1.symboltable.concepts.Struct MoreCondFacts;
nonterminal OrDummy OrDummy;
nonterminal ForeachDesignator ForeachDesignator;

nonterminal DummyFindAny DummyFindAny;
nonterminal DummyEq DummyEq;
nonterminal DummyNon DummyNon;
nonterminal FindAnyEnd FindAnyEnd;

precedence left ELSE;


Program ::= (Program) ProgName:p Declaration:D1 LCURLY MethodDeclList:M2 RCURLY {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) PROG IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

Declaration ::= (ConstDeclaration) Declaration:D1 ConstDecl:C2 {: RESULT=new ConstDeclaration(D1, C2); RESULT.setLine(D1left); :}
			|
			(VarDeclaration) Declaration:D1 VarDecl:V2 {: RESULT=new VarDeclaration(D1, V2); RESULT.setLine(D1left); :}
			|
			(ClassDeclaration) Declaration:D1 ClassDecl:C2 {: RESULT=new ClassDeclaration(D1, C2); RESULT.setLine(D1left); :}
			|
			(NoDeclaration) {: RESULT=new NoDeclaration(); :} /* epsilon */
			;
			
ConstDecl ::= (ConstDecl) CONST Type:constType SingleConstDecl:S1 MultipleConstDecl:M2 SEMICOLON {: RESULT=new ConstDecl(constType, S1, M2); RESULT.setLine(constTypeleft); :};

SingleConstDecl ::= (BoolConstDecl) IDENT:constName EQUAL BOOL:booleanConst {: RESULT=new BoolConstDecl(constName, booleanConst); RESULT.setLine(constNameleft); :}
				|
				(IntegerConstDecl) IDENT:constName EQUAL NUMBER:numberConst {: RESULT=new IntegerConstDecl(constName, numberConst); RESULT.setLine(constNameleft); :}
				|
				(CharConstDecl) IDENT:constName EQUAL CHAR:charConst {: RESULT=new CharConstDecl(constName, charConst); RESULT.setLine(constNameleft); :}
				;
				
MultipleConstDecl ::= (MultipleConstDecls) MultipleConstDecl:M1 COMMA SingleConstDecl:S2 {: RESULT=new MultipleConstDecls(M1, S2); RESULT.setLine(M1left); :}
					|
					(EndOfDeclaration) {: RESULT=new EndOfDeclaration(); :} /* epsilon */
					;	

VarDecl ::= (VarDecls) Type:typeVar VarDeclarations:V1 {: RESULT=new VarDecls(typeVar, V1); RESULT.setLine(typeVarleft); :}
			;

VarDeclarations ::= (MultipleVarDecl) MoreVarDecl:M1 VarDeclarations:V2 {: RESULT=new MultipleVarDecl(M1, V2); RESULT.setLine(M1left); :}
				|
				(EndOfVarDeclarations) EndOfVarDecl:E1 {: RESULT=new EndOfVarDeclarations(E1); RESULT.setLine(E1left); :}
				;
				
MoreVarDecl ::= (MoreVarDecls) IDENT:varName Brackets:B1 COMMA {: RESULT=new MoreVarDecls(varName, B1); RESULT.setLine(varNameleft); :}
			|
			(ErrorMoreVarDecl) error COMMA:l
			{: parser.report_error("Izvrsen oporavak kod dodeljivanja globalne promenljive do , u liniji  " + lleft, null); :} {: RESULT=new ErrorMoreVarDecl(); :}
			;

EndOfVarDecl ::= (EndOfVarDeclar) IDENT:varName Brackets:B1 SEMICOLON {: RESULT=new EndOfVarDeclar(varName, B1); RESULT.setLine(varNameleft); :}
			|
			(ErrorEndOfVarDecl) error SEMICOLON:l
			{: parser.report_error("Izvrsen oporavak kod dodeljivanja globalne promenljive do ; u liniji " + lleft, null); :} {: RESULT=new ErrorEndOfVarDecl(); :}
			;
			
Brackets ::= (ArrayBrackets) LSQUARE RSQUARE {: RESULT=new ArrayBrackets(); :}
			|
			(NoBrackets) {: RESULT=new NoBrackets(); :} /*epsilon*/
			;
			
ClassDecl ::= (ClassDecl) CLASS ClassName:C1 ClassExtends:C2 ClassVarDecl:C3 ClassConstrMethod:C4 RCURLY {: RESULT=new ClassDecl(C1, C2, C3, C4); RESULT.setLine(C1left); :};

ClassName ::= (ClassName) IDENT:className {: RESULT=new ClassName(className); RESULT.setLine(classNameleft); :};

ClassConstrMethod ::= (ClassOnlyCurly) LCURLY RCURLY {: RESULT=new ClassOnlyCurly(); :}
					|
					(ClassMethodCurly) LCURLY ClassMethod:C1 RCURLY {: RESULT=new ClassMethodCurly(C1); RESULT.setLine(C1left); :}
					|
					(ClassConstrMethodCurly) LCURLY ClassConstr:C1 ClassMethod:C2 RCURLY {: RESULT=new ClassConstrMethodCurly(C1, C2); RESULT.setLine(C1left); :}
					|
					(NoClassConstrMethodCurly) {: RESULT=new NoClassConstrMethodCurly(); :} /* epsilon */
					;
					
ClassMethod ::= (MultipleClassMethod) ClassMethod:C1 MethodDecl:M2 {: RESULT=new MultipleClassMethod(C1, M2); RESULT.setLine(C1left); :}
			|
			(EndOfClassMethod) MethodDecl:M1 {: RESULT=new EndOfClassMethod(M1); RESULT.setLine(M1left); :}
			;

ClassVarDecl ::= (MultipleClassVarDecl) ClassVarDecl:C1 VarDecl:V2 {: RESULT=new MultipleClassVarDecl(C1, V2); RESULT.setLine(C1left); :}
				|
				(EndOfClassVarDecl) {: RESULT=new EndOfClassVarDecl(); :} /* epsilon*/
				;

ClassExtends ::= (ClassExtend) EXTENDS Type:T1 LCURLY {: RESULT=new ClassExtend(T1); RESULT.setLine(T1left); :} 
				|
				(NoClassExtend)  LCURLY {: RESULT=new NoClassExtend(); :} 
				|
				(ErrorClassExtend) error:l LCURLY
				{: parser.report_error("Izvrsen oporavak kod prosirenja natklase do { u liniji " + lleft, null); :} {: RESULT=new ErrorClassExtend(); :}
				;


MethodDeclList ::= (MethDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethDeclarations) {: RESULT=new NoMethDeclarations(); :} /* epislon */
				;

MethodDecl ::= (TypeMethodDecl) TypeMethod:T1 LPAREN MethodFormPars:M2 MethodVarDecl:M3 MethodDummy:M4 LCURLY StatementList:S5 RCURLY {: RESULT=new TypeMethodDecl(T1, M2, M3, M4, S5); RESULT.setLine(T1left); :}
					|
					(VoidMethodDecl) VoidMethod:V1 LPAREN MethodFormPars:M2 MethodVarDecl:M3 MethodDummy:M4 LCURLY StatementList:S5 RCURLY {: RESULT=new VoidMethodDecl(V1, M2, M3, M4, S5); RESULT.setLine(V1left); :}
					;

MethodDummy ::= (MethodDummy) {: RESULT=new MethodDummy(); :} /* epsilon */ ;
					
TypeMethod ::= (TypeMethod) Type:methodType IDENT:methodName {: RESULT=new TypeMethod(methodType, methodName); RESULT.setLine(methodTypeleft); :};

VoidMethod ::= (VoidMethod) VOID IDENT:methodName {: RESULT=new VoidMethod(methodName); RESULT.setLine(methodNameleft); :};
					
MethodFormPars ::= (MethodFormParams) FormPars:F1 RPAREN {: RESULT=new MethodFormParams(F1); RESULT.setLine(F1left); :}
				|
				(NoMethodFormParams) RPAREN {: RESULT=new NoMethodFormParams(); :}
				|
				(ErrorMethodFormParams) error RPAREN:l
				{: parser.report_error("Izvrsen oporavak kod formalnog do ) u liniji " + lleft, null); :} {: RESULT=new ErrorMethodFormParams(); :}
				;
				
MethodVarDecl ::= (MethodVarDecls) MethodVarDecl:M1 VarDecl:V2 {: RESULT=new MethodVarDecls(M1, V2); RESULT.setLine(M1left); :}
				|
				(EndOfMethodVarDecl) {: RESULT=new EndOfMethodVarDecl(); :} /*epsilon*/
				;
				
FormPars ::= (FormPars) MultipleFormPar:M1 {: RESULT=new FormPars(M1); RESULT.setLine(M1left); :};

SingleFormPar ::= (SingleFormParam) Type:formType IDENT:formName Brackets:B1 {: RESULT=new SingleFormParam(formType, formName, B1); RESULT.setLine(formTypeleft); :};

MultipleFormPar ::= (MultipleFormPars) MultipleFormPar:M1 COMMA SingleFormPar:S2 {: RESULT=new MultipleFormPars(M1, S2); RESULT.setLine(M1left); :}
				|
				(EndOfFormPar) SingleFormPar:S1 {: RESULT=new EndOfFormPar(S1); RESULT.setLine(S1left); :}
				|
				(ErrorFormComma) error:l {: parser.report_error("Izvrsen oporavak kod formalnog paramtera do , u liniji " + lleft, null); :} COMMA SingleFormPar:S1 {: RESULT=new ErrorFormComma(S1); RESULT.setLine(S1left); :}
				;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStatement) {: RESULT=new NoStatement(); :} /* epsilon */
				;
				
Statement ::= (DesignStmt) DesignatorStatement:D1 {: RESULT=new DesignStmt(D1); RESULT.setLine(D1left); :} 
			|
			(IfStmt) IfStatement:I1 Statement:S2 ElseStatement:E3 {: RESULT=new IfStmt(I1, S2, E3); RESULT.setLine(I1left); :}
			|
			(WhileStmt) WhileStart:W1 LPAREN Condition:C2 RPAREN Statement:S3 WhileEnd:W4 {: RESULT=new WhileStmt(W1, C2, S3, W4); RESULT.setLine(W1left); :}
			|
			(BreakStmt) BREAK SEMICOLON {: RESULT=new BreakStmt(); :}
			|
			(ContinueStmt) CONTINUE SEMICOLON {: RESULT=new ContinueStmt(); :}
			|
			(ReturnNoExpr) RETURN SEMICOLON {: RESULT=new ReturnNoExpr(); :}
			|
			(ReturnExpr) RETURN Expr:E1 SEMICOLON {: RESULT=new ReturnExpr(E1); RESULT.setLine(E1left); :}
			|
			(ReadStmt) READ LPAREN Designator:D1 RPAREN SEMICOLON {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			|
			(PrintStmt) PRINT LPAREN PrintExpr:P1 StmtConst:S2 RPAREN SEMICOLON {: RESULT=new PrintStmt(P1, S2); RESULT.setLine(P1left); :}
			|
			(FindAnyStmt) Designator:designator Assignop:A1 Designator:array DOT FINDANY LPAREN Expr:E2 DummyFindAny:D3 DummyEq:D4 DummyNon:D5 SEMICOLON FindAnyEnd:F6 {: RESULT=new FindAnyStmt(designator, A1, array, E2, D3, D4, D5, F6); RESULT.setLine(designatorleft); :}
			|
			(FindAndReplaceStmt) Designator:D1 Assignop:A2 Designator:D3 DOT FINDANDREPLACE LPAREN Expr:E4 COMMA IDENT:ident ASSIGN Expr:E5 RPAREN SEMICOLON {: RESULT=new FindAndReplaceStmt(D1, A2, D3, E4, ident, E5); RESULT.setLine(D1left); :}
			|
			(ForeachStmt) ForeachDesignator:F1 LPAREN IDENT:ident ASSIGN StatementList:S2 RPAREN SEMICOLON {: RESULT=new ForeachStmt(F1, ident, S2); RESULT.setLine(F1left); :}
			|
			(ListStmts) LCURLY StatementList:S1 RCURLY {: RESULT=new ListStmts(S1); RESULT.setLine(S1left); :}
			;

DummyFindAny ::= (DummyFindAny) RPAREN {: RESULT=new DummyFindAny(); :};	

DummyEq ::= (DummyEq) {: RESULT=new DummyEq(); :} /* epsilon */;

DummyNon ::= (DummyNon) {: RESULT=new DummyNon(); :} /* epsilon */;

FindAnyEnd ::= (FindAnyEnd) {: RESULT=new FindAnyEnd(); :} /* epislon */;			

ForeachDesignator ::= (ForeachDesignator) Designator:D1 DOT FOREACH {: RESULT=new ForeachDesignator(D1); RESULT.setLine(D1left); :} /* epislon */;

StmtConst ::= (StmtCnst) COMMA NUMBER:num {: RESULT=new StmtCnst(num); RESULT.setLine(numleft); :}
			|
			(NoStmtCnst) {: RESULT=new NoStmtCnst(); :} /* epsilon */
			;
			
PrintExpr ::= (PrintExpr) Expr:E1 {: RESULT=new PrintExpr(E1); RESULT.setLine(E1left); :} ;
			
WhileStart ::= (WhileStart) WHILE {: RESULT=new WhileStart(); :};

WhileEnd ::= (WhileEnd) {: RESULT=new WhileEnd(); :} /* epsilon */;
			
DummyBeforeIf ::= (DummyBeforeIf) {: RESULT=new DummyBeforeIf(); :};
			
IfStatement ::= (IfState) DummyBeforeIf:D1 IF BeforeIFConditionDummy:B2 LPAREN Condition:C3 RPAREN AfterIFConditionDummy:A4 {: RESULT=new IfState(D1, B2, C3, A4); RESULT.setLine(D1left); :}
			|
			(ErrorStmt) error RPAREN:l
			{: parser.report_error("Izvrsen oporavak kod if konstrukcije do ; u liniji " + lleft, null); :} {: RESULT=new ErrorStmt(); :}
			;
			
BeforeIFConditionDummy ::= (BeforeIFConditionDummy) {: RESULT=new BeforeIFConditionDummy(); :};
AfterIFConditionDummy ::= (AfterIFConditionDummy) {: RESULT=new AfterIFConditionDummy(); :};

ElseStatement ::= (ElseStmt) ELSE DummyAfterElse:D1 Statement:S2 {: RESULT=new ElseStmt(D1, S2); RESULT.setLine(D1left); :}
				|
				(NoElseStmt) {: RESULT=new NoElseStmt(); :} /* epsilon */
				;

DummyAfterElse ::= (DummyAfterElse) {: RESULT=new DummyAfterElse(); :};
			
DesignatorStatement ::= (DesignAssign) Designator:D1 Assignop:A2 Expr:E3 AssignDummy:A4 SEMICOLON {: RESULT=new DesignAssign(D1, A2, E3, A4); RESULT.setLine(D1left); :}
					|
					(DesignFunction) Designator:D1 LPAREN FactParam:F2 RPAREN SEMICOLON {: RESULT=new DesignFunction(D1, F2); RESULT.setLine(D1left); :}
					|
					(DesignInc) Designator:D1 INCREMENT SEMICOLON {: RESULT=new DesignInc(D1); RESULT.setLine(D1left); :}
					|
					(DesignDec) Designator:D1 DECREMENT SEMICOLON {: RESULT=new DesignDec(D1); RESULT.setLine(D1left); :}
					|
					(DesignError) error SEMICOLON:l
					{: parser.report_error("Izvrsen oporavak kod dodeljivanja vrednosti do ; u liniji " + lleft, null); :} {: RESULT=new DesignError(); :}
					;
					
					
AssignDummy ::= (AssignDummy) {: RESULT=new AssignDummy(); :};

FactParam ::= (FactFuncParams) ActPars:A1 {: RESULT=new FactFuncParams(A1); RESULT.setLine(A1left); :}
				|
				(NoFactFuncParams) {: RESULT=new NoFactFuncParams(); :} /* epsilon */
				;
		
ActPars ::= (ActParams) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParams(A1, E2); RESULT.setLine(A1left); :}
		|
		(SingleActParam) Expr:E1 {: RESULT=new SingleActParam(E1); RESULT.setLine(E1left); :}
		; 
		
Condition ::= (Conditions) CondTerm:C1 OrDummy:O2 OR CondTerm:C3 {: RESULT=new Conditions(C1, O2, C3); RESULT.setLine(C1left); :}
			|
			(SingleCondition) CondTerm:C1 {: RESULT=new SingleCondition(C1); RESULT.setLine(C1left); :}
			;
			
OrDummy ::= (OrDummy) {: RESULT=new OrDummy(); :};
				
CondTerm ::= (CondTerms) CondFact:C1 AND CondFact:C2 {: RESULT=new CondTerms(C1, C2); RESULT.setLine(C1left); :}
			|
			(SingleCondTerm) CondFact:C1 {: RESULT=new SingleCondTerm(C1); RESULT.setLine(C1left); :}
			;
				
CondFact ::= (CondFact) Expr:E1 MoreCondFacts:M2 {: RESULT=new CondFact(E1, M2); RESULT.setLine(E1left); :}
		;
		
MoreCondFacts ::= (MoreConds) Relop:rel Expr:E1 {: RESULT=new MoreConds(rel, E1); RESULT.setLine(relleft); :}
				|
				(EndOfCond) {: RESULT=new EndOfCond(); :} /* epsilon*/
				;
				
Expr ::= (NegativeExpr) MINUS Term:t {: RESULT=new NegativeExpr(t); RESULT.setLine(tleft); :}
		|
		(MultipleExpr) Expr:E1 Addop:A2 Term:T3 {: RESULT=new MultipleExpr(E1, A2, T3); RESULT.setLine(E1left); :}
		|
		(SingleExpr) Term:T1 {: RESULT=new SingleExpr(T1); RESULT.setLine(T1left); :}
		;
				
Term ::= (SingleTerm) Factor:F1 {: RESULT=new SingleTerm(F1); RESULT.setLine(F1left); :}
		|
		(MultipleTerms) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new MultipleTerms(T1, M2, F3); RESULT.setLine(T1left); :}
		;
				
Factor ::= (FactVar) Designator:D1 {: RESULT=new FactVar(D1); RESULT.setLine(D1left); :}
		|
		(FactFunc) Designator:D1 LPAREN FactParam:F2 RPAREN {: RESULT=new FactFunc(D1, F2); RESULT.setLine(D1left); :} 
		|
		(FactNum) NUMBER:N1 {: RESULT=new FactNum(N1); RESULT.setLine(N1left); :}
		|
		(FactChar) CHAR:C1 {: RESULT=new FactChar(C1); RESULT.setLine(C1left); :}
		|
		(FactBoolean) BOOL:B1 {: RESULT=new FactBoolean(B1); RESULT.setLine(B1left); :}
		|
		(FactConstrArray) NEW Type:arrayType LSQUARE Expr:E1 RSQUARE {: RESULT=new FactConstrArray(arrayType, E1); RESULT.setLine(arrayTypeleft); :}
		|
		(FactConstrObject) NEW Type:objectType LPAREN FactParam:F1 RPAREN {: RESULT=new FactConstrObject(objectType, F1); RESULT.setLine(objectTypeleft); :}
		|
		(FactExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactExpr(E1); RESULT.setLine(E1left); :}
		;
				
Designator ::= (ClassDesign) Designator:D1 DOT IDENT:var {: RESULT=new ClassDesign(D1, var); RESULT.setLine(D1left); :}
			|
			(ArrayDesign) DesignatorName:nameArray LSQUARE Expr:expr3 RSQUARE {: RESULT=new ArrayDesign(nameArray, expr3); RESULT.setLine(nameArrayleft); :}
			|
			(VarDesign) IDENT:var {: RESULT=new VarDesign(var); RESULT.setLine(varleft); :};
			
DesignatorName ::= (DesignatorName) IDENT:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :};

Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};

Label ::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};

Relop ::= (IsEqual) IS_EQUAL {: RESULT=new IsEqual(); :}
		|
		(NotEqual) NOT_EQUAL {: RESULT=new NotEqual(); :}
		|
		(Greater) GREATER {: RESULT=new Greater(); :}
		|
		(GreaterEqual) GREATER_EQUAL {: RESULT=new GreaterEqual(); :}
		|
		(Less) LESS {: RESULT=new Less(); :}
		|
		(LessEqual) LESS_EQUAL {: RESULT=new LessEqual(); :}
		;

Addop ::= (Plus) PLUS {: RESULT=new Plus(); :}
		|
		(Minus) MINUS {: RESULT=new Minus(); :}
		;

Mulop ::= (Asterisk) ASTERISK {: RESULT=new Asterisk(); :}
		|
		(Slash) SLASH {: RESULT=new Slash(); :}
		|
		(Percent) PERCENT {: RESULT=new Percent(); :}
		;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

			
